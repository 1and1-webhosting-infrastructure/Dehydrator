using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Annotations;

namespace Dehydrator.EntityFramework
{
    /// <summary>
    /// Provides read-only access to a set of <see cref="IEntity"/>s that is backed by a database accessed via Microsoft's Entity Framework.
    /// </summary>
    /// <typeparam name="TEntity">The specific type of entities managed by this repository.</typeparam>
    public class DbReadRepository<TEntity> : IReadRepository<TEntity>
        where TEntity : class, IEntity, new()
    {
        [NotNull] private readonly DbSet<TEntity> _dbSet;
        [NotNull] private readonly List<string> _includePaths;

        /// <summary>
        /// Creates a new database-backed repository.
        /// </summary>
        /// <param name="dbSet">The database set used to store the entities.</param>
        public DbReadRepository(DbSet<TEntity> dbSet)
        {
            _dbSet = dbSet;
            _includePaths = GetIncludePaths(typeof(TEntity), new HashSet<Type>()).ToList();
        }

        /// <summary>
        /// Builds <see cref="System.Data.Entity.QueryableExtensions.Include{T}"/> paths for Entity Framework based on <see cref="DehydrateAttribute"/> and related attributes on properties.
        /// </summary>
        private static IEnumerable<string> GetIncludePaths(Type type, ISet<Type> visitedTypes)
        {
            if (!visitedTypes.Add(type)) yield break;

            foreach (var prop in type.GetWritableProperties())
            {
                if (prop.HasAttribute<DehydrateAttribute>()) yield return prop.Name;
                else if (prop.HasAttribute<ResolveAttribute>() || prop.HasAttribute<ResolveReferencesAttribute>())
                {
                    yield return prop.Name;
                    foreach (string path in GetIncludePaths(prop.IsCollection() ? prop.GetGenericArg() : prop.PropertyType, visitedTypes))
                        yield return prop.Name + "." + path;
                }
            }
        }

        public IEnumerable<TEntity> GetAll() => _dbSet.AsNoTracking();

        public IEnumerable<TEntity> GetAll(Expression<Func<TEntity, bool>> predicate) => _dbSet.AsNoTracking().Where(predicate);

        public bool Exists(long id) => _dbSet.Any(x => x.Id == id);

        public TEntity Find(long id) => ApplyInclude(_dbSet).FirstOrDefault(x => x.Id == id);

        public IQueryable<TEntity> Query => new DbQueryable<TEntity>(ApplyInclude(_dbSet));

        public async Task<TEntity> FindAsync(long id, CancellationToken cancellationToken = default(CancellationToken)) => await ApplyInclude(_dbSet).FirstOrDefaultAsync(x => x.Id == id, cancellationToken);

        /// <summary>
        /// Applies include paths generated by <see cref="GetIncludePaths"/>.
        /// </summary>
        private IQueryable<TEntity> ApplyInclude(IQueryable<TEntity> queryable) => _includePaths.Aggregate(queryable, (x, path) => x.Include(path));
    }
}
